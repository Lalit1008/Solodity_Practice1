{
	"id": "34f76cac7c0076c084f1da1c5945f3ec",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"artifacts/Lalit/abstract.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity  >=0.5.0 <0.8.0;\n\n/* Abstract Contract is a contract which contain at least one function without implementation.\nabstract contract used as a base contract.not use as a drived contract.\ngenerally  abstract contract contains both implemantation as well as abstract function.\ndrived contract will implement the abstract function and use the existing functions as and when required.\n\nabstract contract can not be deployed.\n*/\n\n// base Contract\n\n\n\n\n\n\n\n// since the function has no implemantation ( abstract function ) mark it as virtual.\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"sources": {
			"artifacts/Lalit/abstract.sol": {
				"ast": {
					"absolutePath": "artifacts/Lalit/abstract.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:32:0"
						}
					],
					"src": "37:549:0"
				},
				"id": 0
			}
		}
	}
}